
# for David Malan
##alias render50="/Applications/MAMP/bin/php5.2/bin/php ~/bin/render50-0.9/bin/render50.php"

# ARGH - not sure how the other pip keeps getting into the env
alias pip='/Users/mcox/.pyenv/shims/pip'

alias pep8='pep8 --max-line-length=100'

alias grep='grep --color=auto'
alias less='less -r'
alias ls='ls -G'
alias screen='screen -U -a -A -d -R -e^Ww'
alias vi='vim'

# git stuff
alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias go='git checkout '
alias gk='gitk --all&'
alias gx='gitx --all'

alias got='git '
alias get='git '

# via AsseemK
alias glol='git log --graph --decorate --pretty=oneline --abbrev-commit --color | emojify | less'
alias glola='git log --graph --decorate --pretty=oneline --abbrev-commit -all --color| emojify | less'

# some functions

## get the fiftythree aws stuff into the env
function get_fiftythree_aws() {
  if [ -x "${HOME}/.dotfiles/zsh/fiftythree_aws" ]; then
    eval $("${HOME}/.dotfiles/zsh/fiftythree_aws")
  fi
}

## remove merged local branches
function git_branch_cleanup() {
  for X in $(git branch --merged | tail -n +2); do
    git branch -d "$X"
  done
}

## always run poet against dotfiles
function poet(){
  /usr/bin/poet $* --dir="${HOME}/.dotfiles/ssh/config.d"
}

## add gnu versions of utils to path
function add_gnu_utils() {
  export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
}

## Print a horizontal rule
function rule() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "${1--}"
}

## Print horizontal ruler with message
function rulem() {
  if [ $# -eq 0 ]; then
    echo "Usage: rulem MESSAGE [RULE_CHARACTER]"
    return 1
  fi
  # Fill line with ruler character ($2, default "-"), reset cursor, move 2 cols right, print message
  printf '%*s' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "${2--}" && echo -e "\r\033[2C[ $1 ]"
}

###############################################################################
# DESCRIPTION:
#   * h highlights with color specified keywords when you invoke it via pipe
#   * h is just a tiny wrapper around the powerful 'ack' (or 'ack-grep'). you need 'ack' installed to use h. ack website: http://beyondgrep.com/
# INSTALL:
#   * put something like this in your .bashrc:
#     . /path/to/h.sh
#   * or just copy and paste the function in your .bashrc
# TEST ME:
#   * try to invoke:
#     echo "abcdefghijklmnopqrstuvxywz" | h   a b c d e f g h i j k l
# GITHUB
#   * https://github.com/paoloantinori/hhighlighter

h() {

	_usage() {
		echo "usage: YOUR_COMMAND | h [-idn] args...
	-i : ignore case
	-d : disable regexp
	-n : invert colors"
	}

	local _OPTS

	# detect pipe or tty
	if test -t 0; then
		_usage
		return
	fi

	# manage flags
	while getopts ":idnQ" opt; do
		case $opt in
			i) _OPTS+=" -i " ;;
			d)  _OPTS+=" -Q " ;;
			n) n_flag=true ;;
			Q)  _OPTS+=" -Q " ;;
				# let's keep hidden compatibility with -Q for original ack users
			\?) _usage
				return ;;
		esac
	done

	shift $(($OPTIND - 1))

	# check maximum allowed input
	if (( ${#@} > 12)); then
		echo "Too many terms. h supports a maximum of 12 groups. Consider relying on regular expression supported patterns like \"word1\\|word2\""
		exit -1
	fi;

	# set zsh compatibility
	[[ -n $ZSH_VERSION ]] && setopt localoptions && setopt ksharrays && setopt ignorebraces

	local _i=0

	if [ -z $n_flag ]; then
		#inverted-colors-last scheme
		_COLORS=( "underline bold red" "underline bold green" "underline bold yellow" "underline bold blue" "underline bold magenta" "underline bold cyan" "bold on_red" "bold on_green" "bold black on_yellow" "bold on_blue" "bold on_cyan" "bold on_magenta" )
	else
		#inverted-colors-first scheme
		_COLORS=( "bold on_red" "bold on_green" "bold black on_yellow" "bold on_blue" "bold on_magenta" "bold on_cyan" "bold black on_white" "underline bold red" "underline bold green" "underline bold yellow" "underline bold blue" "underline bold magenta" )
	fi

	local ACK=ack
	if ! which $ACK >/dev/null 2>&1; then
		ACK=ack-grep
		if ! which $ACK >/dev/null 2>&1; then
			echo "Could not find ack or ack-grep"
			exit -1
		fi
	fi

	# build the filtering command
	for keyword in "$@"
	do
		local _COMMAND=$_COMMAND"$ACK $_OPTS --noenv --flush --passthru --color --color-match=\"${_COLORS[$_i]}\" '$keyword' |"
		_i=$_i+1
	done
	#trim ending pipe
	_COMMAND=${_COMMAND%?}
	#echo "$_COMMAND"
	cat - | eval $_COMMAND
}
